package postal_label_generator_service;

import java.io.*;
import java.util.List;
import org.apache.pdfbox.exceptions.COSVisitorException;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

/**
 * @author      László Milu hockeylaci@gmail.com
 * @version     1.0
 */
public class PdfCreator {
    /**
     * This method creates and saves a pdf, from a list of strings.
     * <p>We used <a href="https://pdfbox.apache.org/">org.apache.pdfbox</a>
     * Other things you might find useful:
     * <a href="https://pdfbox.apache.org/2.0/getting-started.html">Maven dependency</a>
     * <a href="https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/">
     * Examples</a></p>
     * @param postalData is a list of strings contains the name, country, city, address, zipcode in this order
     * @return the method returns the access path, if it's exist, or empty string, if it's not
     */
    public static String convertPostalDataToPdf(List<String> postalData) {
        try {
            String id = PdfCreator.generateId(postalData);
            String fileName = "PostalLabel" + id + ".pdf"; // name of our file

            PDDocument doc = new PDDocument();
            PDPage page = new PDPage();

            doc.addPage(page);

            PDPageContentStream content = new PDPageContentStream(doc, page);
            for (int i = 0, y_pos = 740; i < 5; i++, y_pos -= 50) {
                content.beginText();
                content.setFont(PDType1Font.HELVETICA, 40);
                content.moveTextPositionByAmount(80, y_pos);
                content.drawString(postalData.get(i));
                content.endText();
            }

            content.close();
            doc.save(fileName);
            doc.close();
            return fileName;
        } catch(IOException | COSVisitorException e){
            System.out.println(e.getMessage());
        }
        return "";
    }

    /**
     * <p>The role of this method is create and assign id to each and every generated pdf.
     * This id will be the name of the pdf as well.</p>
     * @param listOfStrings is a list of strings contains the name, country, city, address, zipcode in this order
     * @return the method returns an id (string) generated from the first 2 letters of data in listOfStrings
     */
    private static String generateId(List<String> listOfStrings) {
        String newID = "";
        for(String elem : listOfStrings) {
            newID = newID.concat(elem.substring(0, 2));
        }
        return newID;
    }

    /**
     * The role of this method is to convert the pdfs - generated by convertPostalDataToPdf
     * - to byte[], which is a way to send a bigger size of data in a HTTP request/response body
     * @see #convertPostalDataToPdf
     * @param filename this is the name of the pdf file and its access path at the same time
     * @return the method returns the pdf in byte[] (bytearray) format
     * @throws FileNotFoundException throws exception if there's no such a file,
     * as it was given to it in filename param
     */
    public static byte[] convertToBytes(String filename) throws FileNotFoundException {
        File file = new File(filename);

        FileInputStream fis = new FileInputStream(file);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[1024];
        try {
            for (int readNum; (readNum = fis.read(buf)) != -1; ) {
                bos.write(buf, 0, readNum);
//                # of bytes testprint
//                System.out.println("read " + readNum + " bytes,");
            }
        } catch (IOException ex) {
            System.out.println("Something went wrong, when the program tried to convert pdf to bytearray");
        }
        return bos.toByteArray();

    }
}
